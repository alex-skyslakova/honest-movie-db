datasource db {
  provider = "sqlite" // or another database provider like MySQL, SQLite, etc.
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Badge {
  id     Int    @id @default(autoincrement())
  name   String
  image  String  // Storing image URL or path as string
  users   User[]  @relation("UserBadges")
}

model Genre {
  id     Int     @id @default(autoincrement())
  name   String
  movie  Movie[] @relation("MovieGenres")
}

model Movie {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  image       String?    // Storing image URL or path as string
  rating      Float
  reviews     Review[]
  genres      Genre[]   @relation("MovieGenres")
}

model Review {
  id        Int    @id @default(autoincrement())
  content   String
  rating    Int    // Assuming 0-100 integer rating
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  movie     Movie  @relation(fields: [movieId], references: [id])
  movieId   Int
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  badges         Badge[]  @relation("UserBadges")
  reviews        Review[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
